<?php
// $Id$

/**
 * @file
 * Render an administrative menu as a dropdown menu at the top of the window.
 *
 * Note: Most theme-functions in Administration Menu are not invoked via theme(),
 * because we try to keep this module as fast as possible and chances are very
 * small that someone wants to override those functions.
 */

/**
 * Implementation of hook_help().
 */
function admin_menu_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/admin_menu':
      return t('The administration menu module provides a dropdown menu arranged for one- or two-click access to most administrative tasks and other common destinations (to users with the proper permissions). Use the settings below to customize the appearance of the menu.');

    case 'admin/help#admin_menu':
      $output = '';
      $output .= '<p>' . t('The administration menu module provides a dropdown menu arranged for one- or two-click access to most administrative tasks and other common destinations (to users with the proper permissions). Administration menu also displays the number of anonymous and authenticated users, and allows modules to add their own custom menu items. Integration with the menu varies from module to module; the contributed module <a href="@drupal">Devel</a>, for instance, makes strong use of the administration menu module to provide quick access to development tools.', array('@drupal' => 'http://drupal.org/project/devel')) . '</p>';
      $output .= '<p>' . t('The administration menu <a href="@settings">settings page</a> allows you to modify some elements of the menu\'s behavior and appearance. Since the appearance of the menu is dependent on your site theme, substantial customizations require modifications to your site\'s theme and CSS files. See the advanced module README.txt file for more information on theme and CSS customizations.', array('@settings' => url('admin/settings/admin_menu'))) . '</p>';
      $output .= '<p>' . t('The menu items displayed in the administration menu depend upon the actual permissions of the viewer. First, the administration menu is only displayed to users in roles with the <em>Access administration menu</em> (admin_menu module) permission. Second, a user must be a member of a role with the <em>Access administration pages</em> (system module) permission to view administrative links. And, third, only currently permitted links are displayed; for example, if a user is not a member of a role with the permissions <em>Administer permissions</em> (user module) and <em>Administer users</em> (user module), the <em>User management</em> menu item is not displayed.') . '</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function admin_menu_perm() {
  return array('access administration menu', 'display drupal links');
}

/**
 * Implementation of hook_theme().
 */
function admin_menu_theme() {
  return array(
    'admin_menu_icon' => array(
      'arguments' => array(),
      'file' => 'admin_menu.inc',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function admin_menu_menu() {
  // Module settings.
  $items['admin/settings/admin_menu'] = array(
    'title' => 'Administration menu',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_menu_theme_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'admin_menu.inc',
  );
  // Menu link callbacks.
  $items['admin_menu/toggle-modules'] = array(
    'page callback' => 'admin_menu_toggle_modules',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'admin_menu.inc',
  );
  $items['admin_menu/flush-cache'] = array(
    'page callback' => 'admin_menu_flush_cache',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'admin_menu.inc',
  );
  return $items;
}

/**
 * Implementation of hook_init().
 *
 * We can't move this into admin_menu_footer(), because PHP-only based themes
 * like chameleon load and output scripts and stylesheets in front of
 * theme_closure(), so we ensure Admin menu's styles and scripts are loaded on
 * all pages via hook_init().
 */
function admin_menu_init() {
  if (!user_access('access administration menu')) {
    return;
  }
  $path = drupal_get_path('module', 'admin_menu');
  drupal_add_css($path . '/admin_menu.css', 'module', 'all', FALSE);
  // Performance: Defer execution.
  drupal_add_js($path . '/admin_menu.js', 'module', 'header', TRUE);

  // Destination query strings are applied via JS.
  $settings['destination'] = drupal_get_destination();

  if ($setting = variable_get('admin_menu_margin_top', 1)) {
    $settings['margin_top'] = $setting;
  }
  if ($setting = variable_get('admin_menu_position_fixed', 0)) {
    $settings['position_fixed'] = $setting;
  }
  if ($setting = variable_get('admin_menu_tweak_tabs', 0)) {
    $settings['tweak_tabs'] = $setting;
  }
  if ($_GET['q'] == 'admin/build/modules') {
    $settings['tweak_modules'] = variable_get('admin_menu_tweak_modules', 0);
  }

  drupal_add_js(array('admin_menu' => $settings), 'setting');
}

/**
 * Suppress display of administration menu.
 *
 * This function should be called from within another module's page callback
 * (preferably using module_invoke()) when the menu should not be displayed.
 * This is useful for modules that implement popup pages or other special
 * pages where the menu would be distracting or break the layout.
 *
 * @param $set
 *   Defaults to TRUE. If called before hook_footer, the menu will not be
 *   displayed. If FALSE is passed, the suppression state is returned.
 */
function admin_menu_suppress($set = TRUE) {
  static $suppress = FALSE;
  if (!empty($set)) {
    $suppress = TRUE;
  }
  return $suppress;
}

/**
 * Implementation of hook_footer().
 *
 * @todo Since admin_menu is rebuilt in the same request, we should be able
 *   to use a helper function instead of a variable to remind us to rebuild
 *   (variable_set() is slow).
 */
function admin_menu_footer($main = 0) {
  if (!user_access('access administration menu') || admin_menu_suppress(FALSE)) {
    return;
  }
  global $user, $language;

  $cid = 'admin_menu:' . $user->uid . ':' . $language->language;

  // Check for the flag indicating that we need to rebuild the menu.
  if (variable_get('admin_menu_rebuild_links', FALSE)) {
    module_load_include('inc', 'admin_menu');
    _admin_menu_rebuild_links();
    variable_del('admin_menu_rebuild_links');
  }
  // Try to load and output administration menu from server-side cache.
  else {
    $cache = cache_get($cid, 'cache_menu');
    if ($cache && isset($cache->data)) {
      return $cache->data;
    }
  }

  // Rebuild the output.
  $content  = '<div id="admin-menu">';
  $content .= admin_menu_tree_output(menu_tree_all_data('admin_menu'));
  $content .= '</div>';

  // Cache the menu for this user.
  cache_set($cid, $content, 'cache_menu');

  return $content;
}

/**
 * Return a rendered menu tree.
 *
 * @param $tree
 *   A data structure representing the tree as returned from
 *   menu_tree_all_data().
 *
 * @return string
 *   The complete, rendered administration menu.
 */
function admin_menu_tree_output($tree) {
  $output = '';

  foreach ($tree as $data) {
    $extra_class = isset($data['link']['localized_options']['extra class']) ? $data['link']['localized_options']['extra class'] : NULL;
    $link = admin_menu_item_link($data['link']);

    if ($data['below']) {
      $output .= theme_admin_menu_item($link, $data['link']['has_children'], admin_menu_tree_output($data['below']), $data['link']['in_active_trail'], $extra_class);
    }
    else {
      $output .= theme_admin_menu_item($link, $data['link']['has_children'], '', $data['link']['in_active_trail'], $extra_class);
    }
  }
  return $output ? "\n<ul>" . $output . '</ul>' : '';
}

/**
 * High-performance implementation of theme_menu_item_link().
 *
 * This saves us a theme() call and does only the absolute minimum to get
 * the admin menu links rendered.
 *
 * @param $link
 *   A menu item link.
 */
function admin_menu_item_link($link) {
  static $destination;

  if (!isset($destination)) {
    $destination = drupal_get_destination();
  }

  // Strip destination query string from href attribute and apply a CSS class
  // for our JavaScript behavior instead.
  $class = '';
  if (!empty($link['localized_options']['query'])) {
    if (is_array($link['localized_options']['query']) && isset($link['localized_options']['query']['destination']) && $link['localized_options']['query']['destination'] == $destination) {
      unset($link['localized_options']['query']['destination']);
      $class = ' class="admin-menu-destination"';
    }
    else {
      $query = preg_replace('/&?' . preg_quote($destination, '/') . '/', '', $link['localized_options']['query']);
      if ($query != $link['localized_options']['query']) {
        $link['localized_options']['query'] = $query;
        $class = ' class="admin-menu-destination"';
      }
    }
  }

  // Omit alias lookups.
  $link['localized_options']['alias'] = TRUE;

  return '<a href="' . check_url(url($link['href'], $link['localized_options'])) . '"' . $class . '>' . (!empty($link['localized_options']['html']) ? $link['title'] : check_plain($link['title'])) . '</a>';
}

/**
 * Generate the HTML output for a single menu item and submenu.
 *
 * @param $link
 *   A rendered menu item link.
 * @param $has_children
 *   Whether this item has children.
 * @param $menu
 *   A string containing any rendered children of this item.
 * @param $in_active_trail
 *   Whether this item is in the active menu trail.
 * @param $extra_class
 *   An additional CSS class to set for this item.
 *
 * @see theme_menu_item()
 */
function theme_admin_menu_item($link, $has_children, $menu = '', $in_active_trail = FALSE, $extra_class = NULL) {
  $class = ($menu || $has_children ? 'expandable' : '');
  if (!empty($extra_class)) {
    $class .= ' ' . $extra_class;
  }
  if ($in_active_trail) {
    $class .= ' active-trail';
  }
  return '<li' . (!empty($class) ? ' class="' . $class . '"' : '') . '>' . $link . $menu . '</li>';
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Extends Devel module with Administration menu developer settings.
 */
function admin_menu_form_devel_admin_settings_alter(&$form, $form_state) {
  module_load_include('inc', 'admin_menu');
  _admin_menu_form_devel_admin_settings_alter($form, $form_state);
}

/**
 * Implementation of hook_menu_alter().
 */
function admin_menu_menu_alter() {
  variable_set('admin_menu_rebuild_links', TRUE);
}

/**
 * Implementation of hook_translated_menu_link_alter().
 *
 * Here is where we make changes to links that need dynamic information such
 * as the current page path or the number of users.
 */
function admin_menu_translated_menu_link_alter(&$item, $map) {
  global $user, $base_url;
  static $access_all;

  if ($item['menu_name'] != 'admin_menu') {
    return;
  }

  // Check whether additional development output is enabled.
  if (!isset($access_all)) {
    $access_all = variable_get('admin_menu_show_all', 0) && module_exists('devel');
  }
  // Prepare links that would not be displayed normally.
  if ($access_all && !$item['access']) {
    $item['access'] = TRUE;
    // Prepare for http://drupal.org/node/266596
    if (!isset($item['localized_options'])) {
      _menu_item_localize($item, $map, TRUE);
    }
  }

  // We defined 'Run updates' as external link; apply proper base path now.
  if ($item['link_path'] == 'update.php') {
    $item['title']  = $item['link_title'];
    $item['access'] = ($user->uid == 1 || !empty($GLOBALS['update_free_access']));
    $item['href']   = base_path() . $item['href'];
    _menu_item_localize($item, $map, TRUE);
    return;
  }
  // Don't waste cycles altering items that are not visible
  if (!$item['access']) {
    return;
  }

  // Hide links to drupal.org, if user does not have permission to view them.
  if ($item['link_path'] == 'http://drupal.org' && !user_access('display drupal links')) {
    $item['access'] = FALSE;
    return;
  }
  // Add developer information to all links, if enabled.
  if ($extra = variable_get('admin_menu_display', 0)) {
    $item['title'] .= ' ' . $extra[0] . ': ' . $item[$extra];
  }
  // Handle items that need dynamic localization/replacement.
  if (isset($item['options']['t'])) {
    $item['title'] = t($item['title'], $item['options']['t'] + array('@username' => $user->name));
  }

  // Special processing for our user counter item.
  if ($item['title'] == 'icon_users') {
    // Add count of active anonymous/authenticated users.
    // @see user_block(), user.module
    $interval = time() - variable_get('user_block_seconds_online', 900);
    $count_anon = sess_count($interval);
    $count_auth = db_result(db_query("SELECT COUNT(DISTINCT uid) FROM {sessions} WHERE uid > 0 AND timestamp >= %d", $interval));
    $icon_users = '<img src="' . base_path() . drupal_get_path('module', 'admin_menu') . '/images/icon_users.png" width="16" height="15" alt="@title" title="@title" />';

    $title = array('@title' => t('Current anonymous / authenticated users'));
    $icon_users = strtr($icon_users, $title);
    $item['title'] = t('@count-anon / @count-auth !icon', array('@count-anon' => $count_anon, '@count-auth' => $count_auth, '!icon' => $icon_users));
    if (user_access('administer users')) {
      $item['href'] = 'admin/user/user';
    }
  }
}

